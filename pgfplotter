#ifndef PGFPLOTTER
#define PGFPLOTTER

#include <iostream>
#include <vector>
#include <array>
#include <functional>

namespace pgfplotter
{
    template<typename T>
    using require_iterable = std::enable_if_t<std::is_same<decltype(std::begin(
        std::declval<const T&>())), decltype(std::end(std::declval<const
        T&>()))>::value>;

    std::array<std::vector<double>, 3> mesh_grid(const std::function<double(
        double, double)>& f, double xMin, double xMax, double yMin, double yMax,
        std::size_t res);
    std::array<std::vector<double>, 3> mesh_grid(const std::function<double(
        double, double)>& f, double xMin, double xMax, double yMin, double yMax,
        std::size_t xRes, std::size_t yRes);

    namespace Color
    {
        // These have uniformly increasing perceived lightness.
        constexpr std::array<std::array<int, 3>, 5> Defaults =
        {{
            {  0,  57, 181},
            {202,  46,   0},
            { 44, 151, 225},
            {141, 202,  58},
            {255, 227,   0}
        }};
        // Blue to white to red, with equal perceived lightness and saturation
        // at both ends.
        constexpr std::array<std::array<int, 3>, 3> Bidir =
        {{
            { 10,  10, 143},
            {255, 255, 255},
            {160,  10,  10}
        }};
        constexpr std::array<int, 3> Black = {};
        constexpr std::array<int, 3> DarkGray = {64, 64, 64};
        constexpr std::array<int, 3> Gray = {128, 128, 128};
        constexpr std::array<int, 3> LightGray = {191, 191, 191};
        constexpr std::array<int, 3> White = {255, 255, 255};
        constexpr std::array<int, 3> Red = {255, 0, 0};
        constexpr std::array<int, 3> Green = {0, 255, 0};
        constexpr std::array<int, 3> Blue = {0, 0, 255};
        // Selects color from `Defaults`.
        constexpr std::array<int, 3> Auto = {-1};
        constexpr std::array<int, 3> FromX = {-2};
        constexpr std::array<int, 3> FromY = {-3};
        constexpr std::array<int, 3> FromZ = {-4};
        constexpr std::array<int, 3> FromW = {-5};
    }

    constexpr std::array<int, 3> ColorCycle(std::size_t i)
    {
        return Color::Defaults[i%Color::Defaults.size()];
    }

    enum class LineStyle
    {
        Solid, Dashed, Dotted, None
    };

    struct MarkStyle
    {
        char mark;
        double size;
        int spacing;
        static constexpr MarkStyle Point()
        {
            return {'*', 0.5, 1};
        }
        static constexpr MarkStyle None()
        {
            return {};
        }
        static constexpr MarkStyle Auto()
        {
            return {-1, 1., 0};
        }
    };

    constexpr std::array<MarkStyle, 5> DefaultMarks =
    {{
        {'S', 2./3., 0},
        {'*', 2./3., 0},
        {'D', 2./3., 0},
        {'|', 2./3., 0},
        MarkStyle::None()
    }};

    constexpr MarkStyle MarkCycle(std::size_t i)
    {
        return DefaultMarks[i%DefaultMarks.size()];
    }

    struct DrawStyle
    {
        std::array<int, 3> color;
        MarkStyle markStyle;
        LineStyle lineStyle;
        double lineWidth;
        double opacity;
    };
    constexpr DrawStyle BasicLine = {Color::Auto, MarkStyle::None(), LineStyle::
        Solid, 1., 1.};
    constexpr DrawStyle BasicScatter = {Color::Auto, MarkStyle::Point(),
        LineStyle::None, 1., 1.};
    constexpr DrawStyle Default = {Color::Auto, MarkStyle::Auto(), LineStyle::
        Solid, 1., 1.};

    class Axis
    {
        friend void plot(const std::string&, const std::vector<const Axis*>&);

        std::string _title;
        std::string _xLabel;
        std::string _yLabel;
        std::string _zLabel;

        std::vector<std::array<std::vector<double>, 4>> data;
        std::vector<std::vector<double>> surfaceX;
        std::vector<std::vector<double>> surfaceY;
        std::vector<std::vector<double>> surfaceZ;
        std::vector<bool> matrixSurf;
        std::vector<unsigned int> numContours;
        std::vector<std::string> names;
        std::vector<MarkStyle> markers;
        std::vector<std::array<int, 3>> colors;
        std::vector<LineStyle> lineStyles;
        std::vector<double> lineWidths;
        std::vector<double> opacities;

        std::array<double, 2> _viewAngles = {0., 90.};

        double _opacity = 1.; // Should be per-surface (like `surfaceX`, etc.).

        unsigned int legendPos = 0;

        bool xSqueeze = false;
        bool ySqueeze = false;

        bool xMinSet = false;
        bool xMaxSet = false;
        bool yMinSet = false;
        bool yMaxSet = false;
        bool zMinSet = false;
        bool zMaxSet = false;

        double xMin;
        double xMax;
        double yMin;
        double yMax;
        double zMin;
        double zMax;

        bool axisEqual = false;
        bool axisEqualImage = false;

        double relWidth = 1.;
        double relHeight = 1.;

        int xPrecision = -1;
        int yPrecision = -1;
        int zPrecision = -1;

        unsigned int xFormat = 0;
        unsigned int yFormat = 0;
        unsigned int zFormat = 0;

        bool xLog = false;
        bool yLog = false;
        bool zLog = false;

        bool _showColorbar = false;

        double xSpacing = 0.;
        double ySpacing = 0.;
        double zSpacing = 0.;

        double xOffset = 0.;

        bool _noSep = false;

        std::vector<double> _xTicks;
        std::vector<std::string> _xTickLabels;
        bool _rotateXTickLabels = false;

        std::vector<double> _bgBands;

        bool _bidirColormap = false;

        std::string plot_src(const std::string& dir, int subplot) const;

    public:
        static std::string ToString(double x, unsigned int precision = 10);

        static constexpr unsigned int Fixed = 1;
        static constexpr unsigned int Sci = 2;
        static constexpr unsigned int Northeast = 3;
        static constexpr unsigned int Southeast = 4;
        static constexpr unsigned int Northwest = 5;
        static constexpr unsigned int Southwest = 6;

        void setTitle(const std::string& title);
        void setXLabel(const std::string& xLabel);
        void setYLabel(const std::string& yLabel);
        void setZLabel(const std::string& zLabel);
        void setWLabel(const std::string& zLabel);

        // Either `z` (height) or `w` (meta) or both may be left empty.
        void draw(const DrawStyle& style, const std::vector<double>& x, const
            std::vector<double>& y, const std::vector<double>& z = {}, const
            std::vector<double>& w = {}, const std::string& name = "");

        void surf(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, const std::string& name = "");
        void contour(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, unsigned int contours = 5, const std::
            string& name = "");
        void matrix(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, const std::string& name = "");

        void legend(unsigned int location = Northeast);
        void squeeze();
        void squeezeX();
        void squeezeY();
        void setXMin(double x);
        void setXMax(double x);
        void setYMin(double y);
        void setYMax(double y);
        void setZMin(double z);
        void setZMax(double z);
        void setWMin(double w);
        void setWMax(double w);
        void axis_equal();
        void axis_equal_image();
        void resize(double width, double height);
        void resize(double size);
        void setXPrecision(int n);
        void setYPrecision(int n);
        void setZPrecision(int n);
        void setWPrecision(int n);
        void setXFormat(unsigned int mode);
        void setYFormat(unsigned int mode);
        void setZFormat(unsigned int mode);
        void setWFormat(unsigned int mode);
        void x_log();
        void y_log();
        void z_log();
        void showColorbar();
        void scale_x_spacing(double n);
        void scale_y_spacing(double n);
        void scale_z_spacing(double n);
        void x_offset(double n);
        void setView(double az, double el);
        void setSurfOpacity(double n);
        void noSep();
        void setXTicks(const std::vector<double>& locations, const std::vector<
            std::string>& labels = {}, bool rotate = false);
        void bgBands(const std::vector<double>& transitions);
        void bidirColormap();
    };

    // Note: ".png" is automatically appended to plot path.
    template<typename... Ts>
    void plot(const std::string& path, const Axis& p, Ts&&... q)
    {
        std::vector<const Axis*> ptrs = {&p};
        plot(path, ptrs, q...);
    }
    template<typename... Ts>
    void plot(const std::string& path, std::vector<const Axis*> ptrs, const
        Axis& p, Ts&&... q)
    {
        ptrs.push_back(&p);
        plot(path, ptrs, q...);
    }
    template<typename T, require_iterable<T>* = nullptr>
    void plot(const std::string& path, const T& p)
    {
        std::vector<const Axis*> ptrs;
        ptrs.reserve(p.size());
        for(auto& n : p)
        {
            ptrs.push_back(&n);
        }
        plot(path, ptrs);
    }
    void plot(const std::string& path, const std::vector<const Axis*>& ptrs);
}

#endif
