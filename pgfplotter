#ifndef PGFPLOTTER
#define PGFPLOTTER

#include <iostream>
#include <vector>
#include <array>
#include <functional>

namespace pgfplotter
{
    template<typename T>
    using require_iterable = std::enable_if_t<std::is_same<decltype(std::begin(
        std::declval<const T&>())), decltype(std::end(std::declval<const
        T&>()))>::value>;

    std::array<std::vector<double>, 3> mesh_grid(const std::function<double(
        double, double)>& f, double xMin, double xMax, double yMin, double yMax,
        std::size_t res);
    std::array<std::vector<double>, 3> mesh_grid(const std::function<double(
        double, double)>& f, double xMin, double xMax, double yMin, double yMax,
        std::size_t xRes, std::size_t yRes);

    class Plotter
    {
        friend void plot(const std::string&, const std::vector<const
            Plotter*>&);

        static constexpr std::array<std::array<int, 3>, 5> _colorCycle = {{
            {  0,  57, 181},
            {202,  46,   0},
            { 44, 151, 225},
            {141, 202,  58},
            {255, 227,   0}
        }};

        std::string _title;
        std::string _xLabel;
        std::string _yLabel;
        std::string _zLabel;

        std::vector<std::array<std::vector<double>, 3>> data;
        std::vector<std::vector<double>> surfaceX;
        std::vector<std::vector<double>> surfaceY;
        std::vector<std::vector<double>> surfaceZ;
        std::vector<bool> matrixSurf;
        std::vector<unsigned int> numContours;
        std::vector<std::string> names;
        std::vector<std::string> markers;
        std::vector<std::array<int, 3>> colors;
        std::vector<unsigned int> lineStyles;
        std::vector<double> lineWidths;
        std::vector<double> opacities;

        //TEMP
        std::vector<double> circleX;
        std::vector<double> circleY;
        std::vector<double> circleR;
        //TEMP

        std::array<double, 2> viewAngles = {0.0, 90.0};

        double _opacity = 1.0; // Should be per-surface (like `surfaceX`, etc.).

        unsigned int legendPos = 0;

        bool xSqueeze = false;
        bool ySqueeze = false;

        bool xMinSet = false;
        bool xMaxSet = false;
        bool yMinSet = false;
        bool yMaxSet = false;
        bool zMinSet = false;
        bool zMaxSet = false;

        double xMin;
        double xMax;
        double yMin;
        double yMax;
        double zMin;
        double zMax;

        bool axisEqual = false;
        bool axisEqualImage = false;

        double relWidth = 1.0;
        double relHeight = 1.0;

        int xPrecision = -1;
        int yPrecision = -1;
        int zPrecision = -1;

        unsigned int xFormat = 0;
        unsigned int yFormat = 0;
        unsigned int zFormat = 0;

        bool xLog = false;
        bool yLog = false;
        bool zLog = false;

        bool showColorbar = false;

        double xSpacing = 0.0;
        double ySpacing = 0.0;
        double zSpacing = 0.0;

        double xOffset = 0.0;

        bool _noSep = false;

        std::vector<double> _xTicks;
        std::vector<std::string> _xTickLabels;
        bool _rotateXTickLabels = false;

        std::vector<double> _bgBands;

        bool _bidirColormap = false;

        std::string plot_src(const std::string& dir, int subplot) const;

    public:
        static constexpr std::array<int, 3> ColorCycle(std::size_t i)
        {
            return _colorCycle[i%_colorCycle.size()];
        }

        static std::string ToString(double x, unsigned int precision = 10);

        static constexpr std::array<int, 3> Black = {};
        static constexpr std::array<int, 3> DarkGray = {64, 64, 64};
        static constexpr std::array<int, 3> Gray = {128, 128, 128};
        static constexpr std::array<int, 3> LightGray = {191, 191, 191};
        static constexpr std::array<int, 3> Red = {255, 0, 0};
        static constexpr std::array<int, 3> Green = {0, 255, 0};
        static constexpr std::array<int, 3> Blue = {0, 0, 255};
        static constexpr std::array<int, 3> AutoColor = {-1, -1, -1};
        static constexpr unsigned int Fixed = 1;
        static constexpr unsigned int Sci = 2;
        static constexpr unsigned int Northeast = 3;
        static constexpr unsigned int Southeast = 4;
        static constexpr unsigned int Northwest = 5;
        static constexpr unsigned int Southwest = 6;

        void setTitle(const std::string& title);
        void setXLabel(const std::string& xLabel);
        void setYLabel(const std::string& yLabel);
        void setZLabel(const std::string& zLabel);

        void line(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, const std::string& name, const std::
            array<int, 3>& color, double width);
        void line(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, const std::array<int, 3>& color)
        {
            line(x, y, z, "", color, 1.);
        }
        void line(const std::vector<double>& x, const std::vector<double>& y, const
            std::vector<double>& z, const std::string& name)
        {
            line(x, y, z, name, AutoColor, 1.);
        }
        void line(const std::vector<double>& x, const std::vector<double>& y, const
            std::vector<double>& z)
        {
            line(x, y, z, "", AutoColor, 1.);
        }
        void line(const std::vector<double>& x, const std::vector<double>& y, const
            std::string& name, const std::array<int, 3>& color, double width)
        {
            line(x, y, {}, name, color, width);
        }
        void line(const std::vector<double>& x, const std::vector<double>& y, const
            std::string& name, const std::array<int, 3>& color)
        {
            line(x, y, {}, name, color, 1.);
        }
        void line(const std::vector<double>& x, const std::vector<double>& y, const
            std::array<int, 3>& color)
        {
            line(x, y, {}, "", color, 1.);
        }
        void line(const std::vector<double>& x, const std::vector<double>& y, const
            std::string& name)
        {
            line(x, y, {}, name, AutoColor, 1.);
        }
        void line(const std::vector<double>& x, const std::vector<double>& y)
        {
            line(x, y, {}, "", AutoColor, 1.);
        }
        // ...

        void dashed(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name, const std::array<int, 3>& color);
        void dashed(const std::vector<double>& x, const std::vector<double>& y,
            const std::array<int, 3>& color)
        {
            dashed(x, y, "", color);
        }
        void dashed(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name)
        {
            dashed(x, y, name, AutoColor);
        }
        void dashed(const std::vector<double>& x, const std::vector<double>& y)
        {
            dashed(x, y, "", AutoColor);
        }

        void dotted(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name, const std::array<int, 3>& color);
        void dotted(const std::vector<double>& x, const std::vector<double>& y,
            const std::array<int, 3>& color)
        {
            dotted(x, y, "", color);
        }
        void dotted(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name)
        {
            dotted(x, y, name, AutoColor);
        }
        void dotted(const std::vector<double>& x, const std::vector<double>& y)
        {
            dotted(x, y, "", AutoColor);
        }

        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, char marker, const std::string& name,
            const std::array<int, 3>& color, double opacity);
        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            char marker, const std::string& name, const std::array<int, 3>& color)
        {
            scatter(x, y, {}, marker, name, color, 1.);
        }
        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            char marker, const std::array<int, 3>& color)
        {
            scatter(x, y, marker, "", color);
        }
        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            char marker, const std::string& name)
        {
            scatter(x, y, marker, name, AutoColor);
        }
        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            char marker)
        {
            scatter(x, y, marker, "", AutoColor);
        }
        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name, const std::array<int, 3>& color)
        {
            scatter(x, y, 'o', name, color);
        }
        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            const std::array<int, 3>& color)
        {
            scatter(x, y, 'o', "", color);
        }
        void scatter(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name)
        {
            scatter(x, y, 'o', name, AutoColor);
        }
        void scatter(const std::vector<double>& x, const std::vector<double>& y)
        {
            scatter(x, y, 'o', "", AutoColor);
        }

        void point(double x, double y, char marker, const std::string& name, const
            std::array<int, 3>& color)
        {
            scatter({x}, {y}, marker, name, color);
        }
        // ...
        void point(double x, double y, char marker, const std::array<int, 3>& color)
        {
            point(x, y, marker, std::string{}, color);
        }
        void point(double x, double y, char marker, const std::string& name)
        {
            point(x, y, marker, name, AutoColor);
        }
        // ...
        void point(double x, double y, const std::array<int, 3>& color)
        {
            point(x, y, '.', std::string{}, color);
        }
        // ...
        void point(double x, double y, char marker)
        {
            point(x, y, marker, std::string{}, AutoColor);
        }
        // ...
        void point(double x, double y)
        {
            point(x, y, '.', std::string{}, AutoColor);
        }
        template<typename T>
        void point(const T& v, char marker, const std::string& name, const std::
            array<int, 3>& color)
        {
            point(v[0], v[1], marker, name, color);
        }
        // ...
        template<typename T>
        void point(const T& v, char marker, const std::array<int, 3>& color)
        {
            point(v[0], v[1], marker, std::string{}, color);
        }
        // ...
        template<typename T>
        void point(const T& v, char marker)
        {
            point(v[0], v[1], marker, std::string{}, AutoColor);
        }
        // ...
        template<typename T>
        void point(const T& v)
        {
            point(v[0], v[1], '.', std::string{}, AutoColor);
        }

        void polar_line(const std::vector<double>& x, const std::vector<double>&
            y, const std::string& name, const std::array<int, 3>& color);
        // ...
        void polar_line(const std::vector<double>& x, const std::vector<double>&
            y, const std::string& name)
        {
            polar_line(x, y, name, AutoColor);
        }
        void polar_line(const std::vector<double>& x, const std::vector<double>&
            y, const std::array<int, 3>& color)
        {
            polar_line(x, y, std::string{}, color);
        }
        void polar_line(const std::vector<double>& x, const std::vector<double>&
            y)
        {
            polar_line(x, y, std::string{}, AutoColor);
        }

        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y, char marker, const std::string& name, const std::array<int, 3>&
            color);
        // ...
        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y, char marker, const std::string& name)
        {
            polar_scatter(x, y, marker, name, AutoColor);
        }
        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y, char marker, const std::array<int, 3>& color)
        {
            polar_scatter(x, y, marker, std::string{}, color);
        }
        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y, const std::string& name, const std::array<int, 3>& color)
        {
            polar_scatter(x, y, 'o', name, color);
        }
        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y, const std::array<int, 3>& color)
        {
            polar_scatter(x, y, 'o', std::string{}, color);
        }
        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y, const std::string& name)
        {
            polar_scatter(x, y, 'o', name, AutoColor);
        }
        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y, char marker)
        {
            polar_scatter(x, y, marker, std::string{}, AutoColor);
        }
        void polar_scatter(const std::vector<double>& x, const std::vector<double>&
            y)
        {
            polar_scatter(x, y, 'o', std::string{}, AutoColor);
        }

        void stairs(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name, const std::array<int, 3>& color);
        void stairs(const std::vector<double>& x, const std::vector<double>& y,
            const std::array<int, 3>& color)
        {
            stairs(x, y, "", color);
        }
        void stairs(const std::vector<double>& x, const std::vector<double>& y,
            const std::string& name)
        {
            stairs(x, y, name, AutoColor);
        }
        void stairs(const std::vector<double>& x, const std::vector<double>& y)
        {
            stairs(x, y, "", AutoColor);
        }

        void dashed_stairs(const std::vector<double>& x, const std::vector<double>&
            y, const std::string& name, const std::array<int, 3>& color);
        void dashed_stairs(const std::vector<double>& x, const std::vector<double>&
            y, const std::array<int, 3>& color)
        {
            dashed_stairs(x, y, "", color);
        }
        void dashed_stairs(const std::vector<double>& x, const std::vector<double>&
            y, const std::string& name)
        {
            dashed_stairs(x, y, name, AutoColor);
        }
        void dashed_stairs(const std::vector<double>& x, const std::vector<double>&
            y)
        {
            dashed_stairs(x, y, "", AutoColor);
        }

        // ...
        void surf(const std::vector<double>& x, const std::vector<double>& y, const
            std::vector<double>& z, const std::string& name = "");
        // ...

        // ...
        void contour(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, unsigned int contours = 5, const std::
            string& name = "");
        // ...

        // ...
        void matrix(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& z, const std::string& name = "");
        // ...

        //TEMP
        void circles(const std::vector<double>& x, const std::vector<double>& y,
            const std::vector<double>& r);
        //TEMP

        void legend(unsigned int location = Northeast);
        void squeeze();
        void squeeze_x();
        void squeeze_y();
        void x_min(double x);
        void x_max(double x);
        void y_min(double y);
        void y_max(double y);
        void z_min(double z);
        void z_max(double z);
        void axis_equal();
        void axis_equal_image();
        void resize(double width, double height);
        void resize(double size);
        void x_precision(int n);
        void y_precision(int n);
        void z_precision(int n);
        void x_format(unsigned int mode);
        void y_format(unsigned int mode);
        void z_format(unsigned int mode);
        void x_log();
        void y_log();
        void z_log();
        void colorbar();
        void scale_x_spacing(double n);
        void scale_y_spacing(double n);
        void scale_z_spacing(double n);
        void x_offset(double n);
        void view(double a, double b);
        void opacity(double n);
        void noSep();
        void xTicks(const std::vector<double>& locations, const std::vector<
            std::string>& labels = {}, bool rotate = false);
        void bgBands(const std::vector<double>& transitions);
        void bidirColormap();
    };

    // Note: ".png" is automatically appended to plot path.
    template<typename... Ts>
    void plot(const std::string& path, const Plotter& p, Ts&&... q)
    {
        std::vector<const Plotter*> ptrs = {&p};
        plot(path, ptrs, q...);
    }
    template<typename... Ts>
    void plot(const std::string& path, std::vector<const Plotter*> ptrs, const
        Plotter& p, Ts&&... q)
    {
        ptrs.push_back(&p);
        plot(path, ptrs, q...);
    }
    template<typename T, require_iterable<T>* = nullptr>
    void plot(const std::string& path, const T& p)
    {
        std::vector<const Plotter*> ptrs;
        ptrs.reserve(p.size());
        for(auto& n : p)
        {
            ptrs.push_back(&n);
        }
        plot(path, ptrs);
    }
    void plot(const std::string& path, const std::vector<const Plotter*>& ptrs);
}

#endif
